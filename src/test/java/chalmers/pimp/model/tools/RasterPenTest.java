package chalmers.pimp.model.tools;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertNotSame;
import static org.junit.jupiter.api.Assertions.assertThrows;

import chalmers.pimp.model.IModel;
import chalmers.pimp.model.ModelFactory;
import chalmers.pimp.model.MouseStatus;
import chalmers.pimp.model.MouseStatus.MouseButtonID;
import chalmers.pimp.model.canvas.layer.ILayer;
import chalmers.pimp.model.canvas.layer.IRasterLayer;
import chalmers.pimp.model.canvas.layer.LayerFactory;
import chalmers.pimp.model.color.ColorFactory;
import chalmers.pimp.model.color.IColor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class RasterPenTest {

  private ITool rasterPen;
  ILayer layer;
  IModel model;

  @BeforeEach
  void setUp() {
    IModel model = ModelFactory.createModel();
    ILayer layer = LayerFactory.createRasterLayer(100, 100);
    model.addLayer(layer);
    this.layer = layer;
    this.model = model;
    rasterPen = ToolFactory.createRasterPen(2, model);
  }

  @Test
  void createRasterPen() {
    assertThrows(NullPointerException.class, () -> ToolFactory.createRasterPen(2, null));
    assertThrows(IllegalArgumentException.class, () -> ToolFactory.createRasterPen(0, model));
    assertDoesNotThrow(() -> ToolFactory.createRasterPen(2, model));

    //Tests the eraser as well, since it's just a pen in disguise.
    assertThrows(NullPointerException.class, () -> ToolFactory.createRasterEraser(2, null));
    assertThrows(IllegalArgumentException.class, () -> ToolFactory.createRasterEraser(0, model));
    assertDoesNotThrow(() -> ToolFactory.createRasterEraser(2, model));
  }

  @Test
  void dragged() {
    model.setSelectedColor(ColorFactory.createColor(10, 10, 10));
    IRasterLayer rasterLayer = (IRasterLayer)model.getActiveLayer();
    IColor beforeColor = rasterLayer.getPixelData().getPixel(10, 10).getColor();
    MouseStatus temp = new MouseStatus(0, 0, MouseButtonID.PRIMARY);
    rasterPen.dragged(temp);
    IColor afterColor = rasterLayer.getPixelData().getPixel(0, 0).getColor();
    assertNotSame(beforeColor, afterColor);
  }

  @Test
  void pressed() {
    //Press once and sets the pixel at (0, 0) to default color black.
    //Dummy color
    model.setSelectedColor(ColorFactory.createColor(10, 10, 10));
    IRasterLayer rasterLayer = (IRasterLayer)model.getActiveLayer();
    IColor beforeColor = rasterLayer.getPixelData().getPixel(10, 10).getColor();
    MouseStatus temp = new MouseStatus(0, 0, MouseButtonID.PRIMARY);
    rasterPen.pressed(temp);
    IColor afterColor = rasterLayer.getPixelData().getPixel(0, 0).getColor();
    assertNotSame(beforeColor, afterColor);

    //Now the layer is rotated 180 degrees, the pixel should now be set at the opposite corner (99, 99).
    model.rotateActiveLayer(180);
    rasterPen.pressed(temp);
    afterColor = rasterLayer.getPixelData().getPixel(99, 99).getColor();
    assertNotSame(beforeColor, afterColor);
  }

  @Test
  void released() {
    model.setSelectedColor(ColorFactory.createColor(10, 10, 10));
    IRasterLayer rasterLayer = (IRasterLayer)model.getActiveLayer();
    IColor beforeColor = rasterLayer.getPixelData().getPixel(10, 10).getColor();
    MouseStatus temp = new MouseStatus(0, 0, MouseButtonID.PRIMARY);
    rasterPen.released(temp);
    IColor afterColor = rasterLayer.getPixelData().getPixel(0, 0).getColor();
    assertNotSame(beforeColor, afterColor);
  }
}